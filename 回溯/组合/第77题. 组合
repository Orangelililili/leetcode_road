https://leetcode.cn/problems/combinations/

//把递归与回溯想象成一棵树去处理
// void backtracking(参数) {
//     if (终止条件) {
//         存放结果;
//         return;
//     }

//     for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
//         处理节点;
//         backtracking(路径，选择列表); // 递归
//         回溯，撤销处理结果
//     }
// }

class Solution {
    vector<vector<int>> result; // 存放结果集
    vector<int> path;           // 存放每一个结果
    void backtracking(int n, int k, int startIndex) {
        if (path.size() == k) {
            // 确定返回条件
            result.push_back(path);
            return;
        }
//可以剪枝的地方就在递归中每一层的for循环所选择的起始位置。
//如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了
        for (int i=startIndex; i <=  n - (k - path.size()) + 1; i++) {//剪枝优化
            path.push_back(i);
            backtracking(n, k, i + 1); // 递归
            path.pop_back();//回溯，撤销操作
        }
    }

public:
    vector<vector<int>> combine(int n, int k) {
        result.clear();
        path.clear();
        backtracking(n, k, 1);
        return result;
    }
};

