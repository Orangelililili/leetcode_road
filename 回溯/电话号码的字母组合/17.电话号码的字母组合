https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/

class Solution {
    const string letterMap[10] = {
    "", // 0
    "", // 1
    "abc", // 2
    "def", // 3
    "ghi", // 4
    "jkl", // 5
    "mno", // 6
    "pqrs", // 7
    "tuv", // 8
    "wxyz", // 9
    };
    vector<string> result;
    string s;
    void backTracking(const string &digits,int startIndex){
        if(startIndex==digits.size()){//说明遍历到了最底层
            result.push_back(s);
            return;
        }
        int digit=digits[startIndex]-'0';//将其转换为数字
        string letters=letterMap[digit];//取对应字符集
        for(int i=0;i<letters.size();i++){
            s.push_back(letters[i]);//处理
            backTracking(digits,startIndex+1);//递归
            s.pop_back();//回溯
        }
    } 
public:
    vector<string> letterCombinations(string digits) {
        result.clear();
        s.clear();
        if(digits.size()==0){
            return result;
        }
        backTracking(digits,0);
        return result;
    }
};