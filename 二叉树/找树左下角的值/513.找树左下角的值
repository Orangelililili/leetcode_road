https://leetcode.cn/problems/find-bottom-left-tree-value/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //这不就是层序遍历，最底层第一个不为null的值
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int result=0;
        queue<TreeNode*> que;//层序遍历，先进先出
        if(root==nullptr) return 0;
        que.push(root);

        while(!que.empty()){
            //vector<int> vec;
            int size=que.size();
            for(int i=0;i<size;i++){
                TreeNode* node=que.front();
                que.pop();
                // 只有在当前层的第一个节点时，才更新 result
                if (i == 0) {
                    result = node->val;
                }

                if(node->left) que.push(node->left);
                if(node->right) que.push(node->right);
            }
            //result=vec[0];
        }
        return result;
    }
};