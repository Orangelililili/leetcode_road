https://leetcode.cn/problems/find-mode-in-binary-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //先遍历，数据存到map，后面在vector排序
class Solution {
    void teavseral(TreeNode* cur,unordered_map<int,int>& map){
        if(cur==nullptr) return;//递归返回
        map[cur->val]++;
        //前序
        teavseral(cur->left,map);
        teavseral(cur->right,map);
        return;
    }
    bool static cmp (const pair<int, int>& a, const pair<int, int>& b) {
        return a.second > b.second;
    }
public:
    vector<int> findMode(TreeNode* root) {
        unordered_map<int, int> map;//key为元素，value为出现频率
        //unordered_map是一个无序容器，map是有序的，但他们的key都是不能重复的
        vector<int> result;
        if(root==nullptr) return result;
        teavseral(root,map);
        vector<pair<int, int>> vec(map.begin(), map.end());
        /**
        C++ 的迭代器范围 [first, last) 确实是左闭右开的，这意味着范围的 起点 first 是包含的，而 终点 last 是不包含的。
        因此，end() 指向的是容器的最后一个元素的后一个位置，即所谓的 “尾后迭代器”。

        由于 end() 不指向有效的元素，你是对的：直接使用 end() 是无法获取容器的最后一个元素的。

        为什么使用左闭右开 [first, last) 的方式？
        方便计算范围长度：

        长度可以简单地用 last - first 来计算。
        如果是左闭右闭，就需要额外加 +1 来计算长度，会稍显不便。
        迭代时简单优雅：

        迭代的循环终止条件通常是 it != last，不需要特意处理最后一个元素。
        如果是左闭右闭，迭代条件会稍显复杂，需要写成 it <= last。
        与标准算法一致性：

        C++ 标准库的许多算法（如 std::copy, std::sort 等）都采用 [first, last) 的形式。
        这种方式提供了一种统一的接口，简洁明了。
        **/
        sort(vec.begin(), vec.end(), cmp); // 给频率排个序
        result.push_back(vec[0].first);
        for (int i = 1; i < vec.size(); i++) {
            // 取最高的放到result数组中
            if (vec[i].second == vec[0].second) result.push_back(vec[i].first);//可能不只有一个众数
            else break;
        }
        return result;
    }
};

//二叉搜索树，中序遍历是有序的
class Solution {
private:
    int maxCount = 0; // 最大频率
    int count = 0; // 统计频率
    TreeNode* pre = NULL;
    vector<int> result;
    void searchBST(TreeNode* cur) {
        if (cur == NULL) return ;

        searchBST(cur->left);       // 左
                                    // 中
        if (pre == NULL) { // 第一个节点
            count = 1;
        } else if (pre->val == cur->val) { // 与前一个节点数值相同
            count++;
        } else { // 与前一个节点数值不同
            count = 1;
        }
        pre = cur; // 更新上一个节点

        if (count == maxCount) { // 如果和最大值相同，放进result中
            result.push_back(cur->val);
        }

        if (count > maxCount) { // 如果计数大于最大值频率
            maxCount = count;   // 更新最大频率
            result.clear();     // 很关键的一步，不要忘记清空result，之前result里的元素都失效了
            result.push_back(cur->val);
        }

        searchBST(cur->right);      // 右
        return ;
    }

public:
    vector<int> findMode(TreeNode* root) {
        count = 0;
        maxCount = 0;
        pre = NULL; // 记录前一个节点
        result.clear();

        searchBST(root);
        return result;
    }
};