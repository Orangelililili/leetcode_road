https://leetcode.cn/problems/merge-two-binary-trees/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //就相当于一块遍历两个二叉树

class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if (!root1) return root2; // 如果第一棵树为空，直接返回第二棵树
        if (!root2) return root1; // 如果第二棵树为空，直接返回第一棵树

        stack<pair<TreeNode*, TreeNode*>> st;
        st.push({root1, root2});

        while (!st.empty()) {
            auto [node1, node2] = st.top();
            st.pop();

            if (!node1 || !node2) {
                continue;
            }

            // 合并当前节点的值
            node1->val += node2->val;

            // 如果左子树都不为空，压栈
            if (node1->left && node2->left) {
                st.push({node1->left, node2->left});
            } else if (!node1->left) {
                // 如果 node1 的左子树为空，直接接上 node2 的左子树
                node1->left = node2->left;
            }

            // 如果右子树都不为空，压栈
            if (node1->right && node2->right) {
                st.push({node1->right, node2->right});
            } else if (!node1->right) {
                // 如果 node1 的右子树为空，直接接上 node2 的右子树
                node1->right = node2->right;
            }
        }

        return root1;
    }
};