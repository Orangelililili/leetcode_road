https://leetcode.cn/problems/sum-of-left-leaves/description/

//递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //递归去遍历这棵树，左节点val加入result；
class Solution {

public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(root==nullptr) return 0;
        if(root->left==nullptr&& root->right==nullptr) return 0;

        //左
        int leftValue=sumOfLeftLeaves(root->left);
        if(root->left && !root->left->left && !root->left->right){
            leftValue=root->left->val;
        }

        //右
        int rightValue=sumOfLeftLeaves(root->right);
        int result=leftValue+rightValue;
        return result;
    }
};

//迭代
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        stack<TreeNode*> st;
        if (root == NULL) return 0;
        st.push(root);
        int result = 0;
        while (!st.empty()) {
            TreeNode* node = st.top();
            st.pop();
            if (node->left != NULL && node->left->left == NULL && node->left->right == NULL) {
                result += node->left->val;
            }
            if (node->right) st.push(node->right);
            if (node->left) st.push(node->left);
        }
        return result;
    }
};