https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。
 //从数组中间构建二叉搜索树
class Solution {
    // 左闭右闭区间[left, right]
    TreeNode* traversal(vector<int>& nums, int left, int right){
        //递归第一步，确定返回值及其参数
        if(left>right) return nullptr;//第二步：确定返回值
        //第三步：单层递归逻辑
        int mid = left + ((right - left) / 2);
        //int 类型的取值范围有限 当 left 和 right 都接近 INT_MAX时，执行 left + right 可能会导致整数溢出。
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = traversal(nums, left, mid - 1);
        root->right = traversal(nums, mid + 1, right);
        return root;
    }
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return traversal(nums,0,nums.size()-1);
    }
};