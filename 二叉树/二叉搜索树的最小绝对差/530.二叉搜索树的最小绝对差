https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //二叉搜索树中序遍历是有序的
 //所以最小绝对差就是中序遍历结果相邻两个数之间差值看那个最小
class Solution {
    
    void traversal(TreeNode* cur, vector<int>& vec) {
        if (cur == NULL) return;
        //中序遍历
        traversal(cur->left, vec);  // 左
        vec.push_back(cur->val);    // 中
        traversal(cur->right, vec); // 右
    }
    
public:
    int getMinimumDifference(TreeNode* root) {
        vector<int>vec;
        traversal(root,vec);
        //array<int> arr[vec.size()-1];
        int min=INT_MAX;
        //差值
        for(int i=1;i<vec.size();i++){
            //arr[i]=vec[i+1]-vec[i];
            if(vec[i]-vec[i-1]<min) min =vec[i]-vec[i-1];//result = min(result, vec[i] - vec[i-1]);
        }
        return min;
    }
};