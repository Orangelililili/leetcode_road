https://leetcode.cn/problems/path-sum-ii/description/

class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        if (root == nullptr) {
            return result;
        }
        
        // pair中第一个是节点指针，第二个是到达该节点的路径
        stack<pair<TreeNode*, vector<int>>> st;
        st.push({root, {root->val}});
        
        while (!st.empty()) {
            auto node = st.top();
            st.pop();
            TreeNode* cur = node.first;
            vector<int> path = node.second;
            
            // 到达叶子节点，判断路径和是否等于目标值
            if (!cur->left && !cur->right) {
                int sum = 0;
                for (int val : path) {
                    sum += val;
                }
                if (sum == targetSum) {
                    result.push_back(path);
                }
            }
            
            // 右子节点
            if (cur->right) {
                vector<int> rightPath = path;
                rightPath.push_back(cur->right->val);
                st.push({cur->right, rightPath});
            }
            
            // 左子节点
            if (cur->left) {
                vector<int> leftPath = path;
                leftPath.push_back(cur->left->val);
                st.push({cur->left, leftPath});
            }
        }
        
        return result;
    }
};

//递归
class solution {
private:
    vector<vector<int>> result;
    vector<int> path;
    // 递归函数不需要返回值，因为我们要遍历整个树
    void traversal(TreeNode* cur, int count) {
        if (!cur->left && !cur->right && count == 0) { // 遇到了叶子节点且找到了和为sum的路径
            result.push_back(path);
            return;
        }

        if (!cur->left && !cur->right) return ; // 遇到叶子节点而没有找到合适的边，直接返回

        if (cur->left) { // 左 （空节点不遍历）
            path.push_back(cur->left->val);
            count -= cur->left->val;
            traversal(cur->left, count);    // 递归
            count += cur->left->val;        // 回溯
            path.pop_back();                // 回溯
        }
        if (cur->right) { // 右 （空节点不遍历）
            path.push_back(cur->right->val);
            count -= cur->right->val;
            traversal(cur->right, count);   // 递归
            count += cur->right->val;       // 回溯
            path.pop_back();                // 回溯
        }
        return ;
    }

public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        result.clear();
        path.clear();
        if (root == NULL) return result;
        path.push_back(root->val); // 把根节点放进路径
        traversal(root, sum - root->val);
        return result;
    }
};