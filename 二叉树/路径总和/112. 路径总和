https://leetcode.cn/problems/path-sum/description/

class Solution {
private:
    bool traversal(TreeNode* cur, vector<int>& path, int targetSum) {
        if (cur == nullptr) return false;
        
        // 中
        path.push_back(cur->val);
        
        // 叶子节点判断是否找到了和为targetSum的路径
        if (cur->left == nullptr && cur->right == nullptr) {
            int sum = 0;
            for (int num : path) {
                sum += num;
            }
            if (sum == targetSum) return true;
        }
        
        // 左
        bool left = false;
        if (cur->left) {
            left = traversal(cur->left, path, targetSum);
        }
        
        // 右
        bool right = false;
        if (cur->right) {
            right = traversal(cur->right, path, targetSum);
        }
        
        // 回溯
        path.pop_back();
        
        return left || right;
    }
    
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if (root == nullptr) return false;
        vector<int> path;
        return traversal(root, path, targetSum);
    }
};

//迭代法
class solution {

public:
    bool haspathsum(TreeNode* root, int sum) {
        if (root == null) return false;
        // 此时栈里要放的是pair<节点指针，路径数值>
        stack<pair<TreeNode*, int>> st;
        st.push(pair<TreeNode*, int>(root, root->val));
        while (!st.empty()) {
            pair<TreeNode*, int> node = st.top();
            st.pop();
            // 如果该节点是叶子节点了，同时该节点的路径数值等于sum，那么就返回true
            if (!node.first->left && !node.first->right && sum == node.second) return true;

            // 右节点，压进去一个节点的时候，将该节点的路径数值也记录下来
            if (node.first->right) {
                st.push(pair<TreeNode*, int>(node.first->right, node.second + node.first->right->val));
            }

            // 左节点，压进去一个节点的时候，将该节点的路径数值也记录下来
            if (node.first->left) {
                st.push(pair<TreeNode*, int>(node.first->left, node.second + node.first->left->val));
            }
        }
        return false;
    }
};