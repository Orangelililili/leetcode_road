https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //先是后序，最后一个就是根节点，然后在中序遍历根据这个数字，分割左右
 //然后重复
 //前提是二叉树中没有重复元素
class Solution {
private:
    TreeNode* traversal(vector<int>&inorder,vector<int>&postorder){
        //if(postorder.size()==nullptr) return NULL;//空树

        //后序遍历最后一个节点，就是根节点
        int rootValue=postorder[postorder.size()-1];
        TreeNode* root=new TreeNode(rootValue);

        //叶子节点
        if(postorder.size()==1)return root;

        //找中序遍历切割点
        int delimiterIndex;
        for(delimiterIndex=0;delimiterIndex<postorder.size()-1;delimiterIndex++){
            if(inorder[delimiterIndex]==rootValue)break;
        }

        //切割中序数组
        //左闭右开[0,delimterIndex)
        vector<int> leftInorder(inorder.begin(), inorder.begin() + delimiterIndex);
        //[delimter+1,end)
        vector<int> rightInorder(inorder.begin() + delimiterIndex + 1, inorder.end());

         // postorder 舍弃末尾元素
        postorder.resize(postorder.size() - 1);
        
        // 切割后序数组
        // 依然左闭右开，注意这里使用了左中序数组大小作为切割点
        // [0, leftInorder.size)
        vector<int> leftPostorder(postorder.begin(), postorder.begin() + leftInorder.size());
        // [leftInorder.size(), end)
        vector<int> rightPostorder(postorder.begin() + leftInorder.size(), postorder.end());//之前后序数组删过了，可以直接end

        root->left = traversal(leftInorder, leftPostorder);
        root->right = traversal(rightInorder, rightPostorder);

        return root;

    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()==0||postorder.size()==0)return NULL;
        return traversal(inorder,postorder);
    }
};