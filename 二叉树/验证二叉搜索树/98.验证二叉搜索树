https://leetcode.cn/problems/validate-binary-search-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    //要知道中序遍历下，输出的二叉搜索树节点的数值是有序序列。
    //有了这个特性，验证二叉搜索树，就相当于变成了判断一个序列是不是递增的了。

    
public:
    bool isValidBST(TreeNode* root) {
        //如果不对，直接false，最后则true
        vector<int> result;
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* node=st.top();
            if(node!=NULL){
                st.pop();//中序遍历
                if(node->right) st.push(node->right);//右

                st.push(node);
                st.push(NULL);

                if(node->left) st.push(node->left);
            }else{
                st.pop();
                TreeNode* node=st.top();
                st.pop();
                result.push_back(node->val);
            }
        }

        //看看是不是递增
        for(int i=1;i<result.size();i++){
            if(result[i]<=result[i-1]) return false;//!注意二叉搜索树中不能有重复元素
        }
        return true;
    }
};