https://leetcode.cn/problems/maximum-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* creat(vector<int>& nums){
        //返回根节点
        //1.找到最大值
        //2.左右分割数组
        //3.递归

        if(nums.empty()){
            return nullptr;
        }

        int max =INT_MIN;
        int index=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>max)  {
                index=i;
                max=nums[i];
            }
        }

        // 创建根节点
        TreeNode* root = new TreeNode(max);

        //分割
        vector<int> left(nums.begin(),nums.begin()+index);//左闭右开
        vector<int> right(nums.begin()+index+1,nums.end());

        //递归
        root->left=creat(left);
        root->right=creat(right);

        return root;
    }
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return creat(nums);
    }
};

//每次操作在原数组，节省空间
class Solution {
private:
    // 在左闭右开区间[left, right)，构造二叉树
    TreeNode* traversal(vector<int>& nums, int left, int right) {
        if (left >= right) return nullptr;

        // 分割点下标：maxValueIndex
        int maxValueIndex = left;
        for (int i = left + 1; i < right; ++i) {
            if (nums[i] > nums[maxValueIndex]) maxValueIndex = i;
        }

        TreeNode* root = new TreeNode(nums[maxValueIndex]);

        // 左闭右开：[left, maxValueIndex)
        root->left = traversal(nums, left, maxValueIndex);

        // 左闭右开：[maxValueIndex + 1, right)
        root->right = traversal(nums, maxValueIndex + 1, right);

        return root;
    }
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return traversal(nums, 0, nums.size());
    }
};