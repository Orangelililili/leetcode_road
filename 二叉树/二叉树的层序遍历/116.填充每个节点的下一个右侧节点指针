https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if (!root) return nullptr;

        std::queue<Node*> que;
        que.push(root);

        while (!que.empty()) {
            int size = que.size();  // 每层节点数
            Node* prev = nullptr;

            for (int i = 0; i < size; i++) {
                Node* node = que.front();
                que.pop();

                if (prev) {
                    prev->next = node;
                }
                prev = node;  // 更新 prev 为当前节点

                if (node->left) que.push(node->left);
                if (node->right) que.push(node->right);
            }
            // 最后一层节点的 next 应为 NULL
            prev->next = nullptr;
        }
        
        return root;
    }
};