https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //迭代法
 //相对于102.二叉树的层序遍历，就是最后把result数组反转一下就可以了
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
       vector<vector<int>> result;
       queue<TreeNode*> que;
       if(root!=nullptr){
            que.push(root);
       } 
       while(!que.empty()){
            //队列先入先出。把根节点左右插入遍历
            int size=que.size();//size要变化，因为每一层是不一样的
            vector<int> vec;//遍历每一层
            for(int i=0;i<size;i++){
                TreeNode* node=que.front();
                que.pop();
                vec.push_back(node->val);

                if(node->left) que.push(node->left);
                if(node->right) que.push(node->right);
            }
            result.push_back(vec);
       }
        //反转
        reverse(result.begin(),result.end());
        return result;
    }
};