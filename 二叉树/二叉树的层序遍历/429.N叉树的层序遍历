https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
//就是指向从left,right变成了vector中的元素
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> result;
        queue<Node*> que;//放每层节点
        if(root!=nullptr){
            que.push(root);
        }
        while(!que.empty()){
            vector<int> vec;
            int size=que.size();
            for(int i=0;i<size;i++){
                Node* node=que.front();
                que.pop();
                vec.push_back(node->val);

                //放其他节点，N个
                for(int j=0;j<node->children.size();j++){
                    que.push(node->children[j]);
                }
            }
            result.push_back(vec);
        }
        return result;
    }
};