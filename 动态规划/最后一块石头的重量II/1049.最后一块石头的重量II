https://leetcode.cn/problems/last-stone-weight-ii/description/

class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        vector<int> dp(15001, 0);
        int sum = 0;
        for (int i = 0; i < stones.size(); i++) sum += stones[i];
        int target = sum / 2;
        for (int i = 0; i < stones.size(); i++) { // 遍历物品
            for (int j = target; j >= stones[i]; j--) { // 遍历背包
                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);
            }
        }
        return sum - dp[target] - dp[target];//减两份就是碰撞结束之后的
    }
};
//尽量可以拆成两堆重量差距最小的，那粉碎完就是最小的
//dp[j] 表示：在容量为 j 的背包中，能够达到的最大重量