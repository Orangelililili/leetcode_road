https://leetcode.cn/problems/linked-list-cycle-ii/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        //fast,slow两个指针，fast一次走两步，slow一次走一步
        ListNode* fast=head;
        ListNode* slow=head;
        //要相遇，fast肯定先入环，所以fast==slow就表示存在环
        while(fast!=NULL&&fast->next!=NULL){//检测到环：当slow和fast相遇时，循环将因为slow == fast的条件而终止。
            //链表无环：当fast或fast->next为NULL时，循环将终止，此时返回NULL表示链表中没有环
            fast=fast->next->next;
            slow=slow->next;
            if(slow==fast){//有环判断从哪里开始有环
                ListNode* index1=fast;
                ListNode* index2=head;
                while(index1!=index2){
                    index1=index1->next;
                    index2=index2->next;
                }
                return index2;//返回环入口
            }
        }
        return NULL;
    }
};